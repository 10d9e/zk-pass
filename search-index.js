var searchIndex = JSON.parse('{\
"client":{"doc":"","t":"DLLLMFLLLFMLLFMMMLLMLML","n":["Opt","borrow","borrow_mut","clap","curve","execute_protocol","fmt","from","from_clap","hash_or_randomize_secret","host","into","into_request","main","modp","port","secret","try_from","try_into","type","type_id","user","vzip"],"q":[[0,"client"]],"d":["Command-line options structure for the ZKPass client.","","","","Elliptic curve type for the Elliptic Curve implementation …","Executes the Chaum-Pedersen protocol for client …","","Returns the argument unchanged.","","Hashes the provided secret string or generates a random …","The host address of the ZKPass server.","Calls <code>U::from(self)</code>.","","Main entry point for the ZKPass client.","Type of RFC log group to use for the Discrete Log …","The port number to connect to the ZKPass server.","Optional secret passcode for authentication.","","","Underlying type of the Chaum-Pedersen protocol to use.","","Username for identification.",""],"i":[0,9,9,9,9,0,9,9,9,0,9,9,9,0,9,9,9,9,9,9,9,9,9],"f":[0,[[]],[[]],[[],1],0,[[[3,[[2,[[2,[[2,[2]]]]]]]],4,5],[[8,[[7,[6]]]]]],[[9,10],11],[[]],[12,9],[[[13,[4]]],[[0,[[2,[[0,[[2,[[0,[[2,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]],[14,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]]]]]],[14,[[0,[[2,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]],[14,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]]]]]]]]]],[14,[[0,[[2,[[0,[[2,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]],[14,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]]]]]],[14,[[0,[[2,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]],[14,[[0,[[2,[[0,[2,14]]]],[14,[[0,[2,14]]]]]]]]]]]]]]]]]]]],0,[[]],[[],15],[[],[[8,[[7,[6]]]]]],0,0,0,[[],8],[[],8],0,[[],16],0,[[]]],"c":[],"p":[[3,"App"],[8,"ByteConvertible"],[3,"GroupParams"],[3,"String"],[3,"AuthClientLib"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"Opt"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[4,"Option"],[8,"RandomGenerator"],[3,"Request"],[3,"TypeId"]]},\
"server":{"doc":"","t":"DLLLMLLLMLLFMMLLMLL","n":["Opt","borrow","borrow_mut","clap","curve","fmt","from","from_clap","host","into","into_request","main","modp","port","try_from","try_into","type","type_id","vzip"],"q":[[0,"server"]],"d":["Struct representing command line options for the server.","","","","Command line option to set the elliptic curve type. …","","Returns the argument unchanged.","","Command line option to set the host address for the server.","Calls <code>U::from(self)</code>.","","Main entry point for the ZKPass Chaum-Pedersen protocol …","Command line option to set the type of the RFC log group …","Command line option to set the port for the server. …","","","Command line option to set the underlying type of the …","",""],"i":[0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2],"f":[0,[[]],[[]],[[],1],0,[[2,3],4],[[]],[5,2],0,[[]],[[],6],[[],[[9,[[8,[7]]]]]],0,0,[[],9],[[],9],0,[[],10],[[]]],"c":[],"p":[[3,"App"],[3,"Opt"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"Request"],[8,"Error"],[3,"Box"],[4,"Result"],[3,"TypeId"]]},\
"zk_pass":{"doc":"","t":"AAAAAAQIQQQDQQLLKKKLLAAALLLLLMMLLMMALLLLKLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLFDLLLLLLLLLLLLLADDDDDDAMMALLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMDLLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLKLLLLLLLLLLLLKLLLLLKLLENNNENNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKKIKDLLLLLLLLLLLLLLADDDDDDAMMALLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMDLLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLKLLLLLLLLLLLLKLLLLLKLL","n":["chaum_pedersen","client","cmdutil","conversion","rand","service","Challenge","ChaumPedersen","CommitParameters","CommitmentRandom","GroupParameters","GroupParams","Response","Secret","borrow","borrow_mut","calculate_commitment","calculate_response","challenge","clone","clone_into","constants","curve25519","discretelog","fmt","from","from_ref","from_str","from_str","g","h","into","into_request","p","q","test","to_owned","try_from","try_into","type_id","verify","vzip","EC25519_BASEPOINT_POINT_G","EC25519_BASEPOINT_POINT_H","RFC5114_MODP_1024_160_BIT_PARAMS","RFC5114_MODP_2048_224_BIT_PARAMS","RFC5114_MODP_2048_256_BIT_PARAMS","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","from","from","from","from","from","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","EllipticCurveChaumPedersen","borrow","borrow_mut","calculate_commitment","calculate_response","challenge","from","into","into_request","try_from","try_into","type_id","verify","vzip","DiscreteLogChaumPedersen","borrow","borrow_mut","calculate_commitment","calculate_response","challenge","clone","clone_into","from","from_ref","into","into_request","to_owned","try_from","try_into","type_id","verify","vzip","execute_protocol","AuthClientLib","borrow","borrow_mut","connect","create_authentication_challenge","from","into","into_request","register","try_from","try_into","type_id","verify_authentication","vzip","zkp_auth","AuthenticationAnswerRequest","AuthenticationAnswerResponse","AuthenticationChallengeRequest","AuthenticationChallengeResponse","RegisterRequest","RegisterResponse","auth_client","auth_id","auth_id","auth_server","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","r1","r2","s","session_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user","user","vzip","vzip","vzip","vzip","vzip","vzip","y1","y2","AuthClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","create_authentication_challenge","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","register","send_compressed","to_owned","try_from","try_into","type_id","verify_authentication","vzip","with_interceptor","with_origin","Auth","AuthServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","create_authentication_challenge","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","register","send_compressed","to_owned","try_from","try_into","type_id","verify_authentication","vzip","with_interceptor","ChaumPedersenType","DiscreteLog","Ec25519","EllipticCurve","EllipticCurveType","Rfc5114Modp_1024_160","Rfc5114Modp_2048_224","Rfc5114Modp_2048_256","RfcModpType","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_str","from_str","from_str","into","into","into","into_request","into_request","into_request","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ByteConvertible","from_bytes","to_bytes","RandomGenerator","generate_random","ZkAuth","borrow","borrow_mut","create_authentication_challenge","from","into","into_request","new_discrete_log_chaum_pedersen","new_elliptic_curve_chaum_pedersen","register","try_from","try_into","type_id","verify_authentication","vzip","zkp_auth","AuthenticationAnswerRequest","AuthenticationAnswerResponse","AuthenticationChallengeRequest","AuthenticationChallengeResponse","RegisterRequest","RegisterResponse","auth_client","auth_id","auth_id","auth_server","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","r1","r2","s","session_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","user","user","vzip","vzip","vzip","vzip","vzip","vzip","y1","y2","AuthClient","accept_compressed","borrow","borrow_mut","clone","clone_into","connect","create_authentication_challenge","fmt","from","from_ref","into","into_request","max_decoding_message_size","max_encoding_message_size","new","register","send_compressed","to_owned","try_from","try_into","type_id","verify_authentication","vzip","with_interceptor","with_origin","Auth","AuthServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","create_authentication_challenge","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","poll_ready","poll_ready","register","send_compressed","to_owned","try_from","try_into","type_id","verify_authentication","vzip","with_interceptor"],"q":[[0,"zk_pass"],[6,"zk_pass::chaum_pedersen"],[42,"zk_pass::chaum_pedersen::constants"],[97,"zk_pass::chaum_pedersen::curve25519"],[111,"zk_pass::chaum_pedersen::discretelog"],[129,"zk_pass::chaum_pedersen::test"],[130,"zk_pass::client"],[145,"zk_pass::client::zkp_auth"],[272,"zk_pass::client::zkp_auth::auth_client"],[298,"zk_pass::client::zkp_auth::auth_server"],[329,"zk_pass::cmdutil"],[383,"zk_pass::conversion"],[386,"zk_pass::rand"],[388,"zk_pass::service"],[404,"zk_pass::service::zkp_auth"],[531,"zk_pass::service::zkp_auth::auth_client"],[557,"zk_pass::service::zkp_auth::auth_server"]],"d":["","","","","","","The type representing the challenge in the protocol.","A trait defining the interface for the Chaum-Pedersen …","The type representing the commitment parameters in the …","The type representing the commitment randomness in the …","The type representing the group parameters used in the …","A struct representing group parameters in cryptographic …","The type representing the response in the protocol.","The type representing the secret to be proven.","","","Calculates the commitment in the Chaum-Pedersen protocol.","Calculates the response in the Chaum-Pedersen protocol.","Generates a challenge in the Chaum-Pedersen protocol.","","","A module containing various constants.","","","","Returns the argument unchanged.","","","","The generator <code>g</code> of the group.","An additional generator <code>h</code> of the group, ensuring it’s …","Calls <code>U::from(self)</code>.","","The prime modulus <code>p</code> defining the size of the group.","The order <code>q</code> of the subgroup generated by <code>g</code> and <code>h</code>.","","","","","","Verifies the response in the Chaum-Pedersen protocol.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","A struct representing the Chaum-Pedersen protocol …","","","Calculate the commitment values for the Chaum-Pedersen …","Calculate the response for the Chaum-Pedersen protocol.","Generate a random challenge for the Chaum-Pedersen …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Verify the response for the Chaum-Pedersen protocol.","","A struct representing the Chaum-Pedersen protocol …","","","Calculates the commitment for the given secret <code>x</code> using the …","Generates a random challenge for the protocol within the …","Generates a random challenge for the protocol within the …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","Verifies the response against the given commitment, …","","Executes the Chaum-Pedersen protocol using a generic …","A client library for interacting with the ZKP …","","","Connects to the ZKP authentication service.","Creates an authentication challenge for a user.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Registers a new user with the ZKP authentication service.","","","","Verifies an authentication challenge for a user.","","A module that contains the auto-generated gRPC code for …","","","","","","","Generated client implementations.","","","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","Compress requests with the given encoding.","","","","","","","","","Generated trait containing gRPC methods that should be …","","Enable decompressing requests with the given encoding.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","","Compress responses with the given encoding, if the client …","","","","","","","","An enumeration representing the types of Chaum-Pedersen …","","","","An enumeration representing the types of elliptic curves.","","","","An enumeration representing the types of RFC MODP groups.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","A trait for converting types to and from byte …","Constructs an object from a byte array.","Converts the provided object to a byte array.","","","A struct representing the zero-knowledge authentication …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new instance of <code>ZkAuth</code> using the Discrete Log …","Creates a new instance of <code>ZkAuth</code> using the Elliptic Curve …","","","","","","","","","","","","","","Generated client implementations.","","","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enable decompressing responses.","","","","","Attempt to create a new client by connecting to a given …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","Compress requests with the given encoding.","","","","","","","","","Generated trait containing gRPC methods that should be …","","Enable decompressing requests with the given encoding.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","","Compress responses with the given encoding, if the client …","","","","","","",""],"i":[0,0,0,0,0,0,63,0,63,63,63,0,63,63,2,2,63,63,63,2,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,63,2,0,0,0,0,0,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,13,14,15,16,17,0,68,68,68,68,68,68,68,68,68,68,68,68,68,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,0,0,0,0,0,30,31,0,27,28,29,30,31,32,27,28,29,30,31,32,30,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,29,29,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,28,29,30,31,32,27,29,27,28,29,30,31,32,27,27,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,47,47,47,47,47,47,47,46,47,47,47,47,47,47,47,47,47,47,47,47,46,47,47,47,47,47,46,47,47,0,58,59,58,0,57,57,57,0,57,58,59,57,58,59,57,58,59,57,57,58,58,59,59,57,58,59,57,58,59,57,58,59,57,58,59,57,58,59,57,57,58,58,59,59,57,58,59,57,58,59,57,58,59,0,65,65,0,78,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,0,0,0,0,0,0,0,0,73,71,0,70,72,67,73,71,74,70,72,67,73,71,74,73,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,67,67,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,72,67,73,71,74,70,67,70,72,67,73,71,74,70,70,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,77,77,77,77,77,77,77,76,77,77,77,77,77,77,77,77,77,77,77,77,76,77,77,77,77,77,76,77,77],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],0,0,0,[[[2,[3]],4],5],[[]],[[]],[6,[[8,[[2,[7]]]]]],[6,[[8,[[2,[9]]]]]],0,0,[[]],[[],10],0,0,0,[[]],[[],8],[[],8],[[],11],[[],12],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[2,[9]]]],[14,[[2,[9]]]],[15,[[2,[9]]]],[16,7],[17,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[[2,[7]]]],[[]],[[]],[[],10],[[],8],[[],8],[[],11],[[],12],[[]],0,[[]],[[]],[[]],[[]],[[[2,[9]]],9],[18,18],[[]],[[]],[[]],[[]],[[],10],[[]],[[],8],[[],8],[[],11],[[],12],[[]],[[],12],0,[[]],[[]],[[[20,[19]]],[[8,[21,22]]]],[[21,23,[25,[24]],[25,[24]]],[[8,[26]]]],[[]],[[]],[[],10],[[21,23,[25,[24]],[25,[24]]],[[8,[26]]]],[[],8],[[],8],[[],11],[[21,23,[25,[24]]],[[8,[23,26]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[27],[28],[29],[30],[31],[32],[27,27],[28,28],[29,29],[30,30],[31,31],[32,32],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],28],[[],29],[[],30],[[],31],[[],32],[27,33],[28,33],[29,33],[30,33],[31,33],[32,33],[[27,27],12],[[28,28],12],[[29,29],12],[[30,30],12],[[31,31],12],[[32,32],12],[[27,4],5],[[28,4],5],[[29,4],5],[[30,4],5],[[31,4],5],[[32,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[36,[[35,[34]]]],37],[[36,[[35,[34]]]]]],[[]],[[]],[[[36,[1]]],[[36,[1]]]],[[]],[[[20,[19]]],[[8,[[36,[38]],22]]]],[[[36,[[35,[34]]]],[39,[29]]],[[8,[[40,[30]],26]]]],[[[36,[3]],4],5],[[]],[[]],[[]],[[],10],[[[36,[[35,[34]]]],33],[[36,[[35,[34]]]]]],[[[36,[[35,[34]]]],33],[[36,[[35,[34]]]]]],[[[35,[34]]],[[36,[[35,[34]]]]]],[[[36,[[35,[34]]]],[39,[27]]],[[8,[[40,[28]],26]]]],[[[36,[[35,[34]]]],37],[[36,[[35,[34]]]]]],[[]],[[],8],[[],8],[[],11],[[[36,[[35,[34]]]],[39,[31]]],[[8,[[40,[32]],26]]]],[[]],[[[42,[[41,[34]]]],[35,[34]],43],[[36,[[44,[[42,[[41,[34]]]],[35,[34]],43]]]]]],[[[35,[34]],45],[[36,[[35,[34]]]]]],0,0,[[[47,[46]],37],[[47,[46]]]],[[]],[[]],[[[47,[46]],[41,[[0,[48,49]]]]]],[41],[[[47,[46]]],[[47,[46]]]],[[]],[[[10,[29]]],[[52,[[51,[50]]]]]],[[[47,[[0,[3,46]]]],4],5],[[]],[[[53,[46]]],[[47,[46]]]],[[]],[[]],[[],54],[[],10],[[[47,[46]],33],[[47,[46]]]],[[[47,[46]],33],[[47,[46]]]],[46,[[47,[46]]]],[[[47,[46]],55],[[56,[8]]]],[55,[[56,[8]]]],[[[10,[27]]],[[52,[[51,[50]]]]]],[[[47,[46]],37],[[47,[46]]]],[[]],[[],8],[[],8],[[],11],[[[10,[31]]],[[52,[[51,[50]]]]]],[[]],[[46,43],[[44,[[47,[46]],43]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[57,57],12],[[58,58],12],[[59,59],12],[[57,4],5],[[57,4],[[8,[60]]]],[[58,4],[[8,[60]]]],[[58,4],5],[[59,4],[[8,[60]]]],[[59,4],5],[[]],[[]],[[]],[6,[[8,[57]]]],[6,[[8,[58]]]],[6,[[8,[59]]]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],23],[[],23],[[],23],[[],8],[6,[[8,[57]]]],[[],8],[6,[[8,[58]]]],[6,[[8,[59]]]],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11],[[]],[[]],[[]],0,[[[61,[24]]],[[8,[[51,[62]]]]]],[[],[[25,[24]]]],0,[[],[[8,[[51,[62]]]]]],0,[[]],[[]],[[[66,[[0,[63,64,49]],[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,65]]]]]]]]]]]]]],[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,65]]]]]]]]]]]]]]]],[10,[67]]],[[52,[[51,[50]]]]]],[[]],[[]],[[],10],[[],[[66,[18,9,9]]]],[[],[[66,[68,7,69]]]],[[[66,[[0,[63,64,49]],[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,65]]]]]]]]]]]]]],[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,65]]]]]]]]]]]]]]]],[10,[70]]],[[52,[[51,[50]]]]]],[[],8],[[],8],[[],11],[[[66,[[0,[63,64,49]],[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,65]]]]]]]]]]]]]],[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,[65,[[0,[49,64,1,65]]]]]]]]]]]]]]]],[10,[71]]],[[52,[[51,[50]]]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[70],[72],[67],[73],[71],[74],[70,70],[72,72],[67,67],[73,73],[71,71],[74,74],[[]],[[]],[[]],[[]],[[]],[[]],[[],70],[[],72],[[],67],[[],73],[[],71],[[],74],[70,33],[72,33],[67,33],[73,33],[71,33],[74,33],[[70,70],12],[[72,72],12],[[67,67],12],[[73,73],12],[[71,71],12],[[74,74],12],[[70,4],5],[[72,4],5],[[67,4],5],[[73,4],5],[[71,4],5],[[74,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[75,[[35,[34]]]],37],[[75,[[35,[34]]]]]],[[]],[[]],[[[75,[1]]],[[75,[1]]]],[[]],[[[20,[19]]],[[8,[[75,[38]],22]]]],[[[75,[[35,[34]]]],[39,[67]]],[[8,[[40,[73]],26]]]],[[[75,[3]],4],5],[[]],[[]],[[]],[[],10],[[[75,[[35,[34]]]],33],[[75,[[35,[34]]]]]],[[[75,[[35,[34]]]],33],[[75,[[35,[34]]]]]],[[[35,[34]]],[[75,[[35,[34]]]]]],[[[75,[[35,[34]]]],[39,[70]]],[[8,[[40,[72]],26]]]],[[[75,[[35,[34]]]],37],[[75,[[35,[34]]]]]],[[]],[[],8],[[],8],[[],11],[[[75,[[35,[34]]]],[39,[71]]],[[8,[[40,[74]],26]]]],[[]],[[[42,[[41,[34]]]],[35,[34]],43],[[75,[[44,[[42,[[41,[34]]]],[35,[34]],43]]]]]],[[[35,[34]],45],[[75,[[35,[34]]]]]],0,0,[[[77,[76]],37],[[77,[76]]]],[[]],[[]],[[[77,[76]],[41,[[0,[48,49]]]]]],[41],[[[77,[76]]],[[77,[76]]]],[[]],[[[10,[67]]],[[52,[[51,[50]]]]]],[[[77,[[0,[3,76]]]],4],5],[[]],[[[53,[76]]],[[77,[76]]]],[[]],[[]],[[],54],[[],10],[[[77,[76]],33],[[77,[76]]]],[[[77,[76]],33],[[77,[76]]]],[76,[[77,[76]]]],[55,[[56,[8]]]],[[[77,[76]],55],[[56,[8]]]],[[[10,[70]]],[[52,[[51,[50]]]]]],[[[77,[76]],37],[[77,[76]]]],[[]],[[],8],[[],8],[[],11],[[[10,[71]]],[[52,[[51,[50]]]]]],[[]],[[76,43],[[44,[[77,[76]],43]]]]],"c":[],"p":[[8,"Clone"],[3,"GroupParams"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"RistrettoPoint"],[4,"Result"],[3,"BigUint"],[3,"Request"],[3,"TypeId"],[15,"bool"],[3,"RFC5114_MODP_1024_160_BIT_PARAMS"],[3,"RFC5114_MODP_2048_224_BIT_PARAMS"],[3,"RFC5114_MODP_2048_256_BIT_PARAMS"],[3,"EC25519_BASEPOINT_POINT_G"],[3,"EC25519_BASEPOINT_POINT_H"],[3,"DiscreteLogChaumPedersen"],[3,"Endpoint"],[8,"TryInto"],[3,"AuthClientLib"],[3,"Error"],[3,"String"],[15,"u8"],[3,"Vec"],[3,"Status"],[3,"RegisterRequest"],[3,"RegisterResponse"],[3,"AuthenticationChallengeRequest"],[3,"AuthenticationChallengeResponse"],[3,"AuthenticationAnswerRequest"],[3,"AuthenticationAnswerResponse"],[15,"usize"],[6,"BoxBody"],[8,"GrpcService"],[3,"AuthClient"],[4,"CompressionEncoding"],[3,"Channel"],[8,"IntoRequest"],[3,"Response"],[3,"Request"],[8,"Service"],[8,"Interceptor"],[3,"InterceptedService"],[3,"Uri"],[8,"Auth"],[3,"AuthServer"],[8,"Body"],[8,"Send"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"Arc"],[3,"IntoMakeService"],[3,"Context"],[4,"Poll"],[4,"RfcModpType"],[4,"ChaumPedersenType"],[4,"EllipticCurveType"],[3,"Error"],[15,"slice"],[8,"Error"],[8,"ChaumPedersen"],[8,"Sync"],[8,"ByteConvertible"],[3,"ZkAuth"],[3,"AuthenticationChallengeRequest"],[3,"EllipticCurveChaumPedersen"],[3,"Scalar"],[3,"RegisterRequest"],[3,"AuthenticationAnswerRequest"],[3,"RegisterResponse"],[3,"AuthenticationChallengeResponse"],[3,"AuthenticationAnswerResponse"],[3,"AuthClient"],[8,"Auth"],[3,"AuthServer"],[8,"RandomGenerator"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
